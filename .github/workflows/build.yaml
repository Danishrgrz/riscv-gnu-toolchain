name: Build

on:
  push:
    branches:
      - master
      - rv64ilp32
      - 'rv64ilp32*'
  pull_request:
    branches:
      - master
      - rv64ilp32
      - 'rv64ilp32*'

env:
  linux_git: T-head-Semi/linux
  linux_commit: linux-6.6
  linux_config: rv64ilp32_defconfig
  opensbi_git: riscv-software-src/opensbi
  opensbi_commit: dc0bb19bd2f969e8c2b8c55a71b3ae569eedfaf6
  ARCH: riscv
  rootfs_binary: https://github.com/ruyisdk/riscv-gnu-toolchain-rv64ilp32/releases/download/2024.02.02/rootfs.ext2.tgz

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:     [ubuntu-20.04, ubuntu-22.04]
        mode:   [newlib]
        target: [rv64gc-ilp32d]
        compiler: [gcc]
    steps:
      - name: Remove unneeded frameworks to recover disk space
        run: |
          echo "-- Before --"
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          echo "-- After --"
          df -h

      - uses: actions/checkout@v4

      - uses: actions/checkout@v4
        with:
          repository: ${{ env.linux_git }}
          ref: ${{ env.linux_commit }}
          path: rv64ilp32/linux

      - uses: actions/checkout@v4
        with:
          repository: ${{ env.opensbi_git }}
          ref: ${{ env.opensbi_commit }}
          path: rv64ilp32/opensbi

      - name: install dependencies
        run: sudo ./.github/setup-apt.sh

      - name: build toolchain
        run: |
          TARGET_TUPLE=($(echo ${{ matrix.target }} | tr "-" "\n"))
          BUILD_TOOLCHAIN="./configure --prefix=/opt/riscv --with-arch=${TARGET_TUPLE[0]} --with-abi=${TARGET_TUPLE[1]} --enable-qemu-system"
          if [ "${{ matrix.compiler }}" == "llvm" ]; then # build toolchain with llvm
            $BUILD_TOOLCHAIN --enable-llvm
          else
            $BUILD_TOOLCHAIN
          fi
          sudo make -j $(nproc) ${{ matrix.mode }}

      - name: make report
        if: |
          matrix.os == 'ubuntu-22.04'
          && (matrix.mode == 'linux' || matrix.mode == 'newlib')
          && matrix.compiler == 'gcc'
        run: |
          sudo make report-${{ matrix.mode }} -j $(nproc)

      - name: build kernel
        run: |
          pushd rv64ilp32/linux
            export CROSS_COMPILE=riscv64-unknown-elf-
            export PATH=/opt/riscv/bin:$PATH
            make ${{ env.linux_config }} -j $(nproc) Image
            sudo mkdir -p /opt/riscv/qemu-linux
            sudo cp -v arch/riscv/boot/Image /opt/riscv/qemu-linux/
          popd

      - name: build opensbi
        run: |
          pushd rv64ilp32/opensbi
            export CROSS_COMPILE=riscv64-unknown-elf-
            export PATH=/opt/riscv/bin:$PATH
            make PLATFORM=generic -j $(nproc)
            sudo mkdir -p /opt/riscv/qemu-linux
            sudo cp -v build/platform/generic/firmware/fw_dynamic.bin /opt/riscv/qemu-linux/
            sudo cp -v build/platform/generic/firmware/fw_dynamic.elf /opt/riscv/qemu-linux/
          popd

      - name: download rootfs
        run: |
          sudo mkdir -p /opt/riscv/qemu-linux
          pushd /opt/riscv/qemu-linux
            sudo curl -OL ${{ env.rootfs_binary }}
            sudo tar xvf rootfs.ext2.tgz
            sudo rm -rf rootfs.ext2.tgz
          popd

      - name: Copy start-qemu.sh
        run: |
          sudo cp -v qemu-linux/start-qemu.sh /opt/riscv/qemu-linux/
          sudo chmod +x /opt/riscv/qemu-linux/start-qemu.sh

      - name: recover space
        run: |
          sudo du -hs / 2> /dev/null || true
          sudo rm -rf binutils dejagnu gcc gdb glibc llvm musl newlib pk qemu spike || true
          sudo du -hs / 2> /dev/null || true

      - name: tarball build
        run: tar czvf riscv.tar.gz -C /opt/ riscv/

      - name: generate prebuilt toolchain name
        id:   toolchain-name-generator
        run: |
          if [[ "${{ matrix.target }}" == *"32"* ]]; then BITS=32; else BITS=64; fi
          if [[ "${{ matrix.target }}" == "rv64gc-ilp32d" ]]; then BITS=64ilp32; fi
          case "${{ matrix.mode }}" in
            "linux")
              MODE="glibc";;
            "musl")
              MODE="musl";;
            *)
              MODE="elf";;
          esac
          echo "TOOLCHAIN_NAME=riscv$BITS-$MODE-${{ matrix.os }}-${{ matrix.compiler }}-nightly" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.toolchain-name-generator.outputs.TOOLCHAIN_NAME }}
          path: riscv.tar.gz
